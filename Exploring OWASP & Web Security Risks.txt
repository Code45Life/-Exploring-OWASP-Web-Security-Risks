  OWASP stands for the Open Web Application Security Project, which is a nonprofit organization working toward making software safer. It makes free information, methodologies, guides, tools, and technologies available on the internet that concern security. This is important because this is collective work, and the information is frequently updated to keep pace with emerging threats. OWASP, for that reason, addresses almost everyone in the software development industry- from developers and architects to testers and security vendors- by identifying and remediating over the web application's safety issues, thereby reducing the risk for either the user or the resulted business. Rather, it is bringing them and reassuring them of sound software security so their safety-sounding data has sound security and their customers are preserved.
  OWASP regularly updates this to include the Top 10, which feature the ten leading threats to online applications security. It has good advice on lowering these risks and aims to enlighten developers, executives, and organizations on the most common vulnerabilities they might encounter. This serves as a base for safe coding and is widely accepted as a standard in the industry. Awareness raises the profile of the most common and highest security weaknesses most organizations face. It provides guidance that will suggest recommendations on how best to prevent these vulnerabilities. It also prioritizes, thus allowing organizations to focus on the specific and most important risks. Lastly, it also establishes a baseline to make sure a benchmark is kept for evaluating the security posture of web applications.
  The update usually occurs every two to four years. It depends on how fast the world moves because threats continue to evolve the emergence of new vulnerabilities and attack techniques; because of new and emerging technologies, new security challenges arise; and lastly, because of data analysis from incoming information collected by OWASP. Mostly, the new version reflects the feedback and expertise of professional security communities throughout the world.

  A07:2021- Identification and Authentication Failures refer to weaknesses in verifying a user's identity, managing authentication processes, and securing session management. This vulnerability means that attackers can exploit flaws in authentication mechanisms to gain unauthorized access to user accounts or sensitive information. Previously known as "Broken Authentication," this category encompasses issues such as improper authentication, weak password policies, misconfigured session management, and ineffective credential recovery processes. If an application does not properly enforce authentication controls, such as requiring strong passwords or multi-factor authentication (MFA), attackers can easily compromise user accounts. The consequences of these failures can be unauthorized access, data breaches, accounts being taken over, financial losses, and damage to an organization's reputation. Authentication systems must work well to ensure only real users can access important resources and manage their sessions properly to prevent misuse.
 All sorts of techniques are used by attackers to exploit failures in identification and authentication, mostly against weak authentication or session management flaws. Among these, the most common would be credential stuffing, wherein attackers examine a list of stolen username password pairs from previous breaches and guess it will work if users have reused the same credentials on more than one site. A similar brute force attack uses automated tools to systematically list possible passwords, relying on applications that do not put in place account lockout mechanisms or rate limiting. A common issue stems from default or weak credentials, where preset usernames and passwords are not altered by developers, thus easily allowing attackers to access the systems. Another type of attack is where session identifiers are exposed in URLs or not properly regenerated after login, thereby letting the attackers steal and reuse them. Such as an example is the introduction of session fixation, whereby an attacker can force a user to use a preset session ID that can later be used to exploit. Unprotected mechanisms for recovery of credentials such as knowledge-based authentication questions, put every account user at risk since the answers can either be guessed or retrieved via social engineering. Further, improper session termination, whereby a session remains open even after the user logs out or after it remains idle for an extended time, exposes a window for attackers to hijack ongoing sessions, such as those that are shared or public devices. These types of vulnerabilities exist because of diminished strength in the measures taken in authentication and session management, hence increasing the risk of account compromise for unauthorized access.
  Developers must implement strong authentication measures, ensure secure session management, and keep monitoring authentication activities to protect their web applications from identification and authentication failure. Multi-factor authentication (MFA) guarantees that in case of credential-based attacks such as password or pin code breaches, multiple forms of verification are required before accessing the service. Some examples of such forms of verification include OTPs or biometric scans. Eliminate default credentials and enforce strong password policies based on NIST 800-63b requirements. Secure credential recovery should replace security questions with a phone or email-based verification using time-limited tokens. Generate high-entropy session IDs, do not store them in URLs, and make sure they are properly invalidated on logout or inactivity. Employ rate limiting, CAPTCHAs, and anomaly detection to counteract credential stuffing and brute force attempts. The use of consistent login messages prevents enumeration of accounts, while logging and monitoring authentication failures enables early detection of threats.
  The Uber data breach in September 2022 by Lapus$ began with a hacker purchasing the stolen credentials of an Uber employee from a dark web marketplace. The first attempt to connect to Uber's network with these credentials was unsuccessful since the account had MFA enabled. The attack was said to have started with targeted social engineering of its employees to bypass multi-factor authentication by contacting the Uber employee by WhatsApp and, while pretending to be a member of Uber's security, asking that employee to approve the MFA notifications sent to his phone by flooding it. Finally, the Uber employee gave in to the notification storm and approved an MFA request, which gave access to the VPN, Uber's internal network *.corp.uber.com. Once on the network, the attacker came across a handful of PowerShell scripts, one of which contained hard-coded credentials for a domain admin account for Thycotic, Uber's Privileged Access Management (PAM) solution. With admin access, the attacker logged in and seized Uber's AWS, GCP, Google Drive, Slack workspace, SentinelOne, HackerOne admin console, internal employee dashboards, and some code repository services and tools. The hacker also allegedly accessed Uber's bug bounty reports, which typically contain details of unremediated security vulnerabilities. 
  The 2022 Uber data breach is a well-known case that describes OWASP A07:2021 - flaws in identification and authentication. This was triggered by a social engineering incident using a form of MFA fatigue, in which the attacker sent endless login prompts until one was approved by an Uber contractor; this shows the weakness of Uber's multi-factor authentication against such an attack. The probe further revealed that the attacker later found admin passwords stored in plain ASCII text in. Powershell scripts, in direct contravention of security best practice. These credentials gave access to Privileged Access Management (PAM) and deeper penetration into Uber's Google workspace, Slack, and a pile of code repositories. Most importantly, Uber's security monitoring failed to record any suspicion since no one suspected the malicious activity yet. Hence, the case shows very weak authentication, poor credential storage, and total absence from monitoring that could, in turn, lead to an apparent great risk from a security perspective.
  The attack could have been avoided if Uber had enhanced its security measures. Reinforcing Privileged Identity Management (PIM) and Privileged Access Management (PAM) mechanisms would have been useful in controlling and monitoring the access to critical systems, with strong access policies, MFA, and alerting with unusual behavior. Cyber awareness training would also help staff identify threats such as MFA fatigue and social engineering. In Uber's case, an employee unknowingly approved a fake login attempt, which could have been prevented with sufficient training. Finally, a data leak detection service could alert Uber regarding customer data showing up on the dark web, thus allowing Uber to respond quickly enough to stop further damage.

